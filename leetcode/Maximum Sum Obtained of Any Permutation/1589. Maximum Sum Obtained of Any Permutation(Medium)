# hello-world
                                                   **1589. Maximum Sum Obtained of Any Permutation**

We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... 
+ nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed. Return the maximum total sum of all requests among all permutations of nums.
Since the answer may be too large, return it modulo 109 + 7.

Example 1:

Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
Output: 19
Explanation: One permutation of nums is [2,1,3,4,5] with the following result: 
requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
requests[1] -> nums[0] + nums[1] = 2 + 1 = 3
Total sum: 8 + 3 = 11.
A permutation with a higher total sum is [3,5,4,2,1] with the following result:
requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
requests[1] -> nums[0] + nums[1] = 3 + 5  = 8
Total sum: 11 + 8 = 19, which is the best that you can do.

Solution:
Intuition
We should put the largest number into the most queried position.

Solution
We can count how many times each position was queried using another array cnt. To do so in O(n), we mark the start and end of each query with + 1 and - 1,
and then calculate counts for each position in one swipe.
You can see the picture that demonstrates this here: 1109. Corporate Flight Bookings.
Then, we can sort the input array and the count array, so that larger numbers and higher count are in the matching positions. 
Finally, we compute the maximum sum in one last swipe.

```
class Solution {
public:
    int maxSumRangeQuery(vector<int>& nums, vector<vector<int>>& requests) {
        int n=nums.size();
        vector<int> cnt(n);
        for(auto &r:requests){
            cnt[r[0]]++;
            if(r[1]+1<n)
                cnt[r[1]+1]--;
        }
        for(int i=1;i<n;i++)
            cnt[i]+=cnt[i-1];
        sort(cnt.begin(),cnt.end());
        sort(nums.begin(),nums.end());
        int res=0;
        for(int i=0;i<n;i++){
            res= (res+ (long)nums[i]*cnt[i])%1000000007;
        }
        return res;
    }
};
```
